<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="10" skipped="0" tests="24" time="0.331" timestamp="2023-05-16T14:33:10.556069" hostname="DESKTOP-OPX62DO"><testcase classname="test_calculator" name="test_add_two_positive_numbers" time="0.008" /><testcase classname="test_calculator" name="test_add_function_in_calculator_py" time="0.001" /><testcase classname="test_calculator" name="test_input_dont_get_stuck" time="0.002" /><testcase classname="test_calculator" name="test_add_two_negative_numbers" time="0.005" /><testcase classname="test_calculator" name="test_add_floats" time="0.005"><failure message="ValueError: invalid literal for int() with base 10: '2.5'">calc = &lt;icalc.InteractiveCalculator object at 0x000001B71B11F760&gt;, capfd = &lt;_pytest.capture.CaptureFixture object at 0x000001B71B11F1C0&gt;

    def test_add_floats(calc, capfd):
&gt;       calc.onecmd('add 2.5 2.5')

test_calculator.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
c:\python\python39\lib\cmd.py:217: in onecmd
    return func(arg)
icalc.py:15: in do_add
    print(self.cal.add(*parse(arg)))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

arg = '2.5 2.5'

    def parse(arg):
        'Convert a series of zero or more numbers to an argument tuple'
&gt;       return tuple(map(int, arg.split()))
E       ValueError: invalid literal for int() with base 10: '2.5'

icalc.py:67: ValueError</failure></testcase><testcase classname="test_calculator" name="test_add_and_return_floats_in_calculator_py" time="0.001" /><testcase classname="test_calculator" name="test_subtract_two_positive_numbers" time="0.005" /><testcase classname="test_calculator" name="test_multiply_two_positive_numbers" time="0.004" /><testcase classname="test_calculator" name="test_divide_aliquot_whole_numbers" time="0.008"><failure message="AssertionError: assert '0' == '2'&#10;  - 2&#10;  + 0">calc = &lt;icalc.InteractiveCalculator object at 0x000001B71B1A40D0&gt;, capfd = &lt;_pytest.capture.CaptureFixture object at 0x000001B71B1A4B50&gt;

    def test_divide_aliquot_whole_numbers(calc, capfd):
        calc.onecmd('div 4 2')
        captured = capfd.readouterr()
&gt;       assert captured.out.strip() == '2'
E       AssertionError: assert '0' == '2'
E         - 2
E         + 0

test_calculator.py:64: AssertionError</failure></testcase><testcase classname="test_calculator" name="test_divide_A_B_input_sequence_reversed" time="0.006"><failure message="AssertionError: assert '2' != '2'&#10; +  where '2' = &lt;built-in method strip of str object at 0x000001B71B1E1230&gt;()&#10; +    where &lt;built-in method strip of str object at 0x000001B71B1E1230&gt; = '2\n'.strip&#10; +      where '2\n' = CaptureResult(out='2\n', err='').out">calc = &lt;icalc.InteractiveCalculator object at 0x000001B71B11FCA0&gt;, capfd = &lt;_pytest.capture.CaptureFixture object at 0x000001B71B1602B0&gt;

    def test_divide_A_B_input_sequence_reversed(calc, capfd):
        calc.onecmd('div 2 4')
        captured = capfd.readouterr()
&gt;       assert captured.out.strip() != '2'
E       AssertionError: assert '2' != '2'
E        +  where '2' = &lt;built-in method strip of str object at 0x000001B71B1E1230&gt;()
E        +    where &lt;built-in method strip of str object at 0x000001B71B1E1230&gt; = '2\n'.strip
E        +      where '2\n' = CaptureResult(out='2\n', err='').out

test_calculator.py:70: AssertionError</failure></testcase><testcase classname="test_calculator" name="test_div_function_in_calculator_py" time="0.001" /><testcase classname="test_calculator" name="test_div_aliquant" time="0.001" /><testcase classname="test_calculator" name="test_rem_simple" time="0.005"><failure message="AssertionError: assert '0.3333333333333333' == '1'&#10;  - 1&#10;  + 0.3333333333333333">calc = &lt;icalc.InteractiveCalculator object at 0x000001B71B1956D0&gt;, capfd = &lt;_pytest.capture.CaptureFixture object at 0x000001B71B195490&gt;

    def test_rem_simple(calc, capfd):
        calc.onecmd('rem 1 3')
        captured = capfd.readouterr()
&gt;       assert captured.out.strip() == '1'
E       AssertionError: assert '0.3333333333333333' == '1'
E         - 1
E         + 0.3333333333333333

test_calculator.py:89: AssertionError</failure></testcase><testcase classname="test_calculator" name="test_rem_function_in_calculator_py" time="0.003" /><testcase classname="test_calculator" name="test_sqrt_simple" time="0.007"><failure message="TypeError: sub() missing 1 required positional argument: 'b'">calc = &lt;icalc.InteractiveCalculator object at 0x000001B71B1A7910&gt;, capfd = &lt;_pytest.capture.CaptureFixture object at 0x000001B71B1A72B0&gt;

    def test_sqrt_simple(calc, capfd):
&gt;       calc.onecmd('sqrt 25')

test_calculator.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
c:\python\python39\lib\cmd.py:217: in onecmd
    return func(arg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;icalc.InteractiveCalculator object at 0x000001B71B1A7910&gt;, arg = '25'

    def do_sqrt(self, arg):
        'sqrt(A)'
&gt;       print(self.cal.sub(*parse(arg)))
E       TypeError: sub() missing 1 required positional argument: 'b'

icalc.py:35: TypeError</failure></testcase><testcase classname="test_calculator" name="test_sqrt_function_in_calculator_py" time="0.001" /><testcase classname="test_calculator" name="test_checksum_function_in_calculator_py" time="0.001"><failure message="assert (0 != 0)">def test_checksum_function_in_calculator_py():
        cal = calculator.Calculator()
        result = cal.checksum(123) and cal.checksum(321)
&gt;       assert result != 0 and 0
E       assert (0 != 0)

test_calculator.py:115: AssertionError</failure></testcase><testcase classname="test_calculator" name="test_bit_and_icalc" time="0.005" /><testcase classname="test_calculator" name="test_bit_or_icalc" time="0.006"><failure message="AssertionError: assert '' == '1536'&#10;  - 1536">calc = &lt;icalc.InteractiveCalculator object at 0x000001B71B161280&gt;, capfd = &lt;_pytest.capture.CaptureFixture object at 0x000001B71B161E20&gt;

    def test_bit_or_icalc(calc, capfd):
        calc.onecmd('bit_or 1024 512')
        captured = capfd.readouterr()
&gt;       assert captured.out.strip() == '1536'
E       AssertionError: assert '' == '1536'
E         - 1536

test_calculator.py:129: AssertionError</failure></testcase><testcase classname="test_calculator" name="test_bit_xor_icalc" time="0.006" /><testcase classname="test_calculator" name="test_bit_not_icalc" time="0.006"><failure message="AssertionError: assert '58' == '5'&#10;  - 5&#10;  + 58">calc = &lt;icalc.InteractiveCalculator object at 0x000001B71B151FD0&gt;, capfd = &lt;_pytest.capture.CaptureFixture object at 0x000001B71B151EE0&gt;

    def test_bit_not_icalc(calc, capfd):
        number = int('111010', 2)
        bnot_n = int('000101', 2)
        calc.onecmd('bit_not ' + str(number))
        captured = capfd.readouterr()
&gt;       assert captured.out.strip() == str(bnot_n)
E       AssertionError: assert '58' == '5'
E         - 5
E         + 58

test_calculator.py:145: AssertionError</failure></testcase><testcase classname="test_calculator" name="test_bit_shift_left_icalc" time="0.006" /><testcase classname="test_calculator" name="test_bit_shift_right_icalc" time="0.005"><failure message="NameError: name 'arg' is not defined">calc = &lt;icalc.InteractiveCalculator object at 0x000001B71B1A8AC0&gt;, capfd = &lt;_pytest.capture.CaptureFixture object at 0x000001B71B1A8460&gt;

    def test_bit_shift_right_icalc(calc, capfd):
        a = int('01110000', 2)
        b = 4
        c = int('00000111', 2)
&gt;       calc.onecmd('bit_shift_right ' + str(a) + ' ' + str(b))

test_calculator.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
c:\python\python39\lib\cmd.py:217: in onecmd
    return func(arg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;icalc.InteractiveCalculator object at 0x000001B71B1A8AC0&gt;, a = '112 4'

    def do_bit_shift_right(self, a):
        'num &gt;&gt; shift'
&gt;       print(self.cal.bshl(*parse(arg)))
E       NameError: name 'arg' is not defined

icalc.py:59: NameError</failure></testcase><testcase classname="test_calculator" name="test_mul_functions_random_troublemaker" time="0.001"><failure message="assert 119 == 30">def test_mul_functions_random_troublemaker():
        cal = calculator.Calculator()
        for i in range(0, 1000):
            result = cal.mul(6, 5)
&gt;           assert result == 30
E           assert 119 == 30

test_calculator.py:172: AssertionError</failure></testcase></testsuite></testsuites>